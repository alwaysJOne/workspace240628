<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<context:property-placeholder location="classpath:application.properties" file-encoding="UTF-8"/>
	
	<!-- 
		root-context.xml
		서버구동과 동시에 web.xml을 거처서 바로 로딩되는 문서
		=> 서버구동과 동시에 바로 세팅(빈으로 등록)해야되는 내용들을 작성하면된다.
		DB연결 설정, 트랜잭션처리, 내외부 모듈연결등등...
	 -->
	 
	 <!-- 커넥션풀을 쓸 수 있는 객체등록 -->
 	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
       <property name="driverClassName" value="${jdbc.driverClassName}"/>
       <property name="url" value="${jdbc.url}"/>
       <property name="username" value="${jdbc.username}"/>
       <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 
    	BasicDataSource dataSource = new BasicDataSource();
    	dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
    	dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
    	...
     -->
     
     <!-- 마이바티스 객체 등록 -->
     <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
     </bean>
     <!-- 
     	SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
     	sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
     	...
      -->
      
      <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
      	<constructor-arg ref="sqlSessionFactory"/>
      </bean>
      
      <!-- 
      	SqlSessionTemplate sqlSession= new SqlSessionTemplate(sqlSessionFactory);
       -->
       
       <!-- 
       		property : setter를 통해 주입
       		constructor-arg : 생성자를 통한 주입
        -->
     
     <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
     	<property name="maxUploadSize" value="100000000"/>
     	<property name="maxInMemorySize" value="100000000"/>
     </bean>
     
 
	<!-- @Aspect 어노테이션도 scan 하기 위함 -->
	<context:component-scan base-package="com.kh.aop" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
	</context:component-scan>
	
	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl" id="sender">
		<property name="host" value="${mail.smtp.host}"/>
		<property name="port" value="${mail.smtp.port}"/>
		<property name="username" value="${mail.smtp.username}"/>
		<property name="password" value="${mail.smtp.password}"/>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
</beans>





